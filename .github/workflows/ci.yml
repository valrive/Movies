name: CI

on:
#on: [push]
#on: [pull_request]

  push:
    branches: ["onlyPopularMovies"]
  pull_request:
    branches: ["onlyPopularMovies"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:

  lint:
    name: Perform lint check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Cache Gradle
        uses: actions/cache@v2
        with:
          path:
            ~/.gradle/caches
#            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
#          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: ${{ runner.os }}-gradle-

#      - name: Make Gradle executable
##      git update-index --chmod=+x ./gradlew o solo gradlew
#        run: chmod +x ./gradlew

      - name: Run lint
        run: ./gradlew lintDevDebug

      - name: Upload lint report report
        uses: actions/upload-artifact@v2
        with:
          name: lint-report
          path: '**/build/reports/lint-results-*'


  unit-test:
    name: Perform Unit Testing
#    continue-on-error: true
    needs: [ lint ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

#      - name: Cache Gradle
#        uses: actions/cache@v2
#        with:
#          path:
#            ~/.gradle/caches
##            ~/.gradle/wrapper
#          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
##          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
#          restore-keys: ${{ runner.os }}-gradle-

      - name: Run tests
        run: ./gradlew test #testDevDebugUnitTest

      - name: Android Test Report
        uses: asadmansr/android-test-report-action@v1.2.0
        if: ${{ always() }}

      - name: Upload test report
        uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: unit_test_report
          path: '**/build/reports/tests/'



  instrumentation-test:
    name: Perform Instrumentation Testing
    needs: [ unit-test ]
    runs-on: macos-latest # MacOS runs faster

    steps:
      - name: Checkout the code
        uses: actions/checkout@v4

      # Gradle v8.0.0 requires java JDK v17
      - name: Set up Java JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: '17'

      - name: Run espresso tests
        uses: reactivecircus/android-emulator-runner@v2 # 3rd party tool
        with:
          api-level: 29
          script: ./gradlew connectedCheck

      - name: Upload Instrumentation Test report
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: instrumentation_test_report
          path: app/build/reports/androidTests/connected

#  static-code-analysis:
#    name: Perform static code analysis
#    needs: [ instrumentation-test ]
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout the code
#        uses: actions/checkout@v2
#
#      - name: Set up Java JDK 17
#        uses: actions/setup-java@v1
#        with:
#          java-version: '17'
#
#      - name: SonarCloud Scan # sonarcloud properties in gradle.properties file
#        run: ./gradlew app:sonarqube -Dsonar.login=${{ secrets.SONAR_TOKEN }}
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  debug-apk:
    name: Generate Debug APK
    needs: [ instrumentation-test ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle
        uses: actions/cache@v2
        with:
          path:
            ~/.gradle/caches
#            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
#          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Assemble Debug
        run: ./gradlew assembleDebug
#        run: ./gradlew build --no-daemon

      - name: Upload apk to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{secrets.FIREBASE_APP_ID}}
          serviceCredentialsFileContent: ${{ secrets.CREDENTIAL_FILE_CONTENT }}
          groups: testers
          releaseNotes: ${{ github.event.inputs.release_notes }}
#          file: app/build/outputs/apk/release/app-release-unsigned.apk
          file: app/build/outputs/apk/dev/debug/app-dev-debug.apk

      - name: Upload APK Artifact
        uses: actions/upload-artifact@v2
        with:
          name: apk
#          path: app/build/outputs/apk/dev/debug/app-dev-debug.apk
          path: app/build/outputs/apk/dev/debug/**.apk